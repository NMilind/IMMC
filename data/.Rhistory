# Draw Q-Q Plots for the data sets
par(mfrow=c(2,2))
qqnorm(AX.wing, main="Q-Q Plot for AX Wing Length")
qqline(AX.wing)
qqnorm(AX.antenna, main="Q-Q Plot for AX Antenna Length")
qqline(AX.antenna)
qqnorm(AA.wing, main="Q-Q Plot for AA Wing Length")
qqline(AA.wing)
qqnorm(AA.antenna, main="Q-Q Plot for AA Antenna Length")
qqline(AA.antenna)
par(mfrow=c(1,1))
# Create the ratio dataset
AX <- AX.wing / AX.antenna
AA <- AA.wing / AA.antenna
# Run Shapiro-Wilk Tests for Normality
shapiro.test(AX)
## RESULT: p-value = 0.913
shapiro.test(AA)
## RESULT: p-value = 0.3515
# Draw Q-Q Plots for the Datsets
par(mfrow=c(1,2))
qqnorm(AX, main="Q-Q Plot for AX Ratios")
qqline(AX)
qqnorm(AA, main="Q-Q Plot for AA Ratios")
qqline(AA)
par(mfrow=c(1,1))
# Run a T-Test to see if the means of the distributions are significantly different
t.test(AX, AA)
## RESULTS
## p-value = 1.679e-06
data.ax_aa <- data.frame(c(mean(AX), mean(AA)))
data.ax_aa["Type"] <- c("AX", "AA")
data.ax_aa["Confidence"] <- c(0.2077695, 0.3345611)
names(data.ax_aa) <- c("means", "type", "ci")
ggplot(data.ax_aa, aes(x=type, y=means, group=0)) +
geom_line() +
geom_errorbar(width=0.1, aes(ymin=means-ci, ymax=means+ci)) +
geom_point(shape=21, size=3, fill="white") +
ylim(0, 2)
shapiro.test(rnorm(1000))
dnorm(1000)
dnorm(1,2)
t.test(AX, AA)
library(shiny); source('Desktop/R-Code/RBook-HTMLWidgets/leaflet.R')
### Author:     Nikhil Milind
### Date:       October 8 2016
### ENVIRONMENT SETUP ###
# Clear environment
rm(list = ls())
# Install libraries
# install.packages("ShinyApp")
# install.packages("leaflet")
# Import libraries
library(shiny)
library(leaflet)
### USER INTERFACE ###
ui <- fluidPage(
# Title of the ShinyApp
titlePanel("Leaflet Demonstration"),
# A layout with a sidebar
sidebarLayout(
# Content of the sidebar panel
sidebarPanel(
# Two input controls
#numericInput("lat", "Latitude:", min=-90, max=90, value=44.366002, step=0.001),
#numericInput("lon", "Longitude:", min=-180, max=180, value=-68.196409, step=0.001)
sliderInput("pop", "Population:", min=0, max=8406000, value = c(50000, 700000), step = 1)
),
# Content of the main panel
mainPanel(
# The leaflet widget UI
leafletOutput("map")
)
)
)
### SERVER LOGIC ###
population <- read.csv(textConnection(
"City,Population,Lat,Lon
Nashville,678889,36.1627,-86.7816
Asheville,87236,35.5951,-82.5515
Portland,609456,45.5231,-122.6765
Denver,649495,39.7392,-104.9903
Kansas City,467007,39.0997,-94.5786
Seattle,652405,47.6062,-122.3321
New York City,8406000,40.7128,-74.0059"
), header=TRUE)
ie <- function(condition, value1, value2) {
if (condition) {
return(value1)
}
return(value2)
}
server <- function(input, output) {
output$map <- renderLeaflet({
leaflet(data=population) %>%
addTiles() %>%
addCircleMarkers(
~Lon,
~Lat,
color=~ie(input$pop[1] <= Population && Population <= input$pop[2], "navy", "red"),
stroke=FALSE,
fillOpacity=~ie(input$pop[1] <= Population && Population <= input$pop[2], 0.5, 0.1),
popup=~paste(sep="<br/>", paste(sep="", "<b>", as.character(City), "</b>"), as.character(Population)),
radius=~sqrt(Population / 1000))
})
}
### RUN SERVER ###
options(browser = "/usr/bin/firefox")
runApp(list(ui = ui, server = server), host="127.0.0.1", port=8080, launch.browser=TRUE)
install.packages("DT")
library(DT)
library(shiny)
library(DT)
datatable(iris)
### Author:     Nikhil Milind
### Date:       October 19 2016
library(shiny)
library(DT)
ui <- fluidPage(
# Title of the ShinyApp
titlePanel("Data Table Demonstration"),
# A layout with a sidebar
sidebarLayout(
# Content of the sidebar panel
sidebarPanel(
),
# Content of the main panel
mainPanel(
# The data table UI
DT::dataTableOutput("tbl")
)
)
)
runApp(ui=ui, server=server)
### Author:     Nikhil Milind
### Date:       October 19 2016
library(shiny)
library(DT)
ui <- fluidPage(
# Title of the ShinyApp
titlePanel("Data Table Demonstration"),
# A layout with a sidebar
sidebarLayout(
# Content of the sidebar panel
sidebarPanel(
),
# Content of the main panel
mainPanel(
# The data table UI
DT::dataTableOutput("tbl")
)
)
)
server <- function(input, output) {
output$tbl <- renderDataTable(
iris,
options = list(lengthChange = FALSE)
)
}
runApp(ui=ui, server=server)
### Author:     Nikhil Milind
### Date:       October 19 2016
library(shiny)
library(DT)
ui <- fluidPage(
# Title of the ShinyApp
titlePanel("Data Table Demonstration"),
# A layout with a sidebar
sidebarLayout(
# Content of the sidebar panel
sidebarPanel(
),
# Content of the main panel
mainPanel(
# The data table UI
DT::dataTableOutput("tbl")
)
)
)
server <- function(input, output) {
output$tbl <- renderDataTable(
iris,
options = list(lengthChange = FALSE)
)
}
options(browser = "/usr/bin/firefox")
runApp(list(ui = ui, server = server), host="127.0.0.1", port=8080, launch.browser=TRUE)
### Author:     Nikhil Milind
### Date:       October 19 2016
library(shiny)
library(DT)
ui <- fluidPage(
# Title of the ShinyApp
titlePanel("Data Table Demonstration"),
# A layout with a sidebar
sidebarLayout(
# Content of the sidebar panel
sidebarPanel(
plotOutput("plot")
),
# Content of the main panel
mainPanel(
# The data table UI
DT::dataTableOutput("tbl")
)
)
)
server <- function(input, output) {
output$tbl <- renderDataTable(
iris,
options = list(lengthChange = FALSE)
)
}
options(browser = "/usr/bin/firefox")
runApp(list(ui = ui, server = server), host="127.0.0.1", port=8080, launch.browser=TRUE)
### Author:     Nikhil Milind
### Date:       October 19 2016
library(shiny)
library(DT)
ui <- fluidPage(
# Title of the ShinyApp
titlePanel("Data Table Demonstration"),
# A layout with a sidebar
sidebarLayout(
# Content of the sidebar panel
sidebarPanel(
plotOutput("plot")
),
# Content of the main panel
mainPanel(
# The data table UI
DT::dataTableOutput("tbl")
)
)
)
server <- function(input, output) {
output$tbl <- renderDataTable(
iris,
options = list(lengthChange = FALSE)
)
output$plot <- renderPlot(
qplot(iris$Sepal.Length, iris$Sepal.Width)
)
}
options(browser = "/usr/bin/firefox")
runApp(list(ui = ui, server = server), host="127.0.0.1", port=8080, launch.browser=TRUE)
### Author:     Nikhil Milind
### Date:       October 19 2016
library(ggplot2)
library(shiny)
library(DT)
ui <- fluidPage(
# Title of the ShinyApp
titlePanel("Data Table Demonstration"),
# A layout with a sidebar
sidebarLayout(
# Content of the sidebar panel
sidebarPanel(
plotOutput("plot")
),
# Content of the main panel
mainPanel(
# The data table UI
DT::dataTableOutput("tbl")
)
)
)
server <- function(input, output) {
output$tbl <- renderDataTable(
iris,
options = list(lengthChange = FALSE)
)
output$plot <- renderPlot({
qplot(iris$Sepal.Length, iris$Sepal.Width)
})
}
options(browser = "/usr/bin/firefox")
runApp(list(ui = ui, server = server), host="127.0.0.1", port=8080, launch.browser=TRUE)
### Author:     Nikhil Milind
### Date:       October 19 2016
library(ggplot2)
library(shiny)
library(DT)
ui <- fluidPage(
# Title of the ShinyApp
titlePanel("Data Table Demonstration"),
# A layout with a sidebar
sidebarLayout(
# Content of the sidebar panel
sidebarPanel(
plotOutput("plot")
),
# Content of the main panel
mainPanel(
# The data table UI
DT::dataTableOutput("tbl")
)
)
)
server <- function(input, output) {
output$tbl <- renderDataTable(
iris,
options = list(lengthChange = FALSE)
)
output$plot <- renderPlot({
qplot(iris$Sepal.Length, iris$Sepal.Width)
})
}
options(browser = "/usr/bin/firefox")
runApp(list(ui = ui, server = server), host="127.0.0.1", port=8080, launch.browser=TRUE)
rm(list=ls())
package(datasets)
library(datasets)
airquality
View(airquality)
library(ggplot2)
qplot(airquality$Ozone, main="Ozone")
qplot(airquality$Solar.R, main="Solar Radiation")
qplot(airquality$Wind)
qplot(airquality$Temp)
qplot(airquality$Month)
qplot(airquality$Day)
type(airquality)
typeof(airquality)
matrix(airquality)
airquality.mtx <- matrix(airquality)
View(airquality.mtx)
airquality.mtx[,"Ozone"]
airquality[,"Ozone"]
airquality[,"Solar.R"]
airquality[,"Wind"]
airquality[,"Temp"]
airquality[,"Month"]
airquality[,"Day"]
airquality[1,]
airquality[2,]
rm(list=ls())
pH <- c("NA", "5", "7", "7", "7", "9", "9", "9")
NaCl <- c(0, 0, 0, 100, 500, 0, 100, 500)
buffer <- c("A", "B", "C", "D", "E", "F", "G", "H")
yield <- c(43.6, 31.4, 76.1, 25.1, 28.1, 44.8, 22.8, 23.2)
library(ggplot2)
DATA <- data.frame(cbind(buffer, pH, NaCl, yield))
View(DATA)
ggplot(data=DATA, mapping=aes(x=pH, y=yield))
ggplot(data=DATA, mapping=aes(x=pH, y=yield)) + geom_point()
ggplot(data=DATA, mapping=aes(x=pH, y=yield)) + geom_point(color=NaCl)
ggplot(data=DATA, mapping=aes(x=pH, y=yield)) + geom_point(color=as.factor(NaCl))
ggplot(data=DATA, mapping=aes(x=pH, y=yield)) + geom_point(colour=as.factor(NaCl))
ggplot(data=DATA, mapping=aes(x=pH, y=yield)) + geom_point(colour=aes(as.factor(NaCl)))
ggplot(data=DATA, mapping=aes(x=pH, y=yield)) + geom_point(colour=aes(NaCl))
NaCl <- c("0", "0", "0", "100", "500", "0", "100", "500")
DATA <- data.frame(cbind(buffer, pH, NaCl, yield))
ggplot(data=DATA, mapping=aes(x=pH, y=yield)) + geom_point(colour=aes(as.factor(NaCl)))
ggplot(data=DATA, mapping=aes(x=pH, y=yield)) + geom_point()
ggplot(data=DATA, mapping=aes(x=pH, y=yield)) + geom_point(color=aes(NaCl))
ggplot(data=DATA, mapping=aes(x=pH, y=yield)) + geom_point(color=aes(factor(NaCl)))
ggplot(data=DATA, mapping=aes(x=pH, y=yield)) + geom_point(aes(NaCl))
ggplot(data=DATA, mapping=aes(x=pH, y=yield)) + geom_point(aes(color=NaCl))
ggplot(data=DATA, mapping=aes(x=pH, y=yield)) + geom_point(aes(color=NaCl))
ggplot(data=DATA, mapping=aes(x=pH, y=yield)) + geom_point(aes(color=NaCl)) + geom_line()
ggplot(data=DATA, mapping=aes(x=pH, y=yield)) + geom_point(aes(color=NaCl)) + geom_line(aes(color=NaCl))
ggplot(data=DATA, mapping=aes(x=pH, y=yield)) + geom_point(aes(color=NaCl)) + geom_line(aes(x=c("5", "7", "9", "NA"), y=c(30, 30, 30, 30)))
ggplot(data=DATA, mapping=aes(x=pH, y=yield)) + geom_point(aes(color=NaCl))
ggplot(data=DATA, mapping=aes(x=pH, y=yield)) + geom_point(aes(color=NaCl), size=I(3))
ggplot(data=DATA, mapping=aes(x=pH, y=yield)) + geom_point(aes(color=NaCl), size=I(5))
ggplot(data=DATA, mapping=aes(x=pH, y=yield), main="Percent Yield by Varying pH and Ionic Strength in Solubilization Buffer") + geom_point(aes(color=NaCl), size=I(5))
ggplot(data=DATA, mapping=aes(x=pH, y=yield), main="Percent Yield by Varying pH and Ionic Strength in Solubilization Buffer") + geom_point(aes(color=NaCl), size=I(5))
ggplot(data=DATA, mapping=aes(x=pH, y=yield), title="Percent Yield by Varying pH and Ionic Strength in Solubilization Buffer") + geom_point(aes(color=NaCl), size=I(5))
ggplot(data=DATA, mapping=aes(x=pH, y=yield)) + geom_point(aes(color=NaCl), size=I(5)) + xlab("pH of Buffer")
ggplot(data=DATA, mapping=aes(x=pH, y=yield)) + geom_point(aes(color=NaCl), size=I(5)) + xlab("pH of Buffer") + ylab("Percent Yield of Protein")
ggplot(data=DATA, mapping=aes(x=pH, y=yield)) + geom_point(aes(color=NaCl), size=I(5)) + xlab("pH of Buffer") + ylab("Percent Yield of Protein") + main("Percent Yield by Varying pH and Ionic Strength in Solubilization Buffer")
ggplot(data=DATA, mapping=aes(x=pH, y=yield)) + geom_point(aes(color=NaCl), size=I(5)) + xlab("pH of Buffer") + ylab("Percent Yield of Protein") + title("Percent Yield by Varying pH and Ionic Strength in Solubilization Buffer")
ggplot(data=DATA, mapping=aes(x=pH, y=yield)) + geom_point(aes(color=NaCl), size=I(5)) + xlab("pH of Buffer") + ylab("Percent Yield of Protein") + ggtitle("Percent Yield by Varying pH and Ionic Strength in Solubilization Buffer")
ggplot(data=DATA, mapping=aes(x=pH, y=yield)) + geom_point(aes(color=NaCl), size=I(5)) + xlab("pH of Buffer") + ylab("Percent Yield of Protein") + ggtitle("Percent Yield by Varying pH and Ionic Strength in Solubilization Buffer") + theme(plot.title = element_text(hjust = 0.5))
cimin <- c(2, 2, 2, 2, 2, 2, 2, 2)
cimax <- c(98, 98, 98, 98, 98, 98, 98, 98)
DATA <- data.frame(cbind(buffer, pH, NaCl, yield, cimin, cimax))
View(DATA)
ggplot(data=DATA, mapping=aes(x=pH, y=yield)) + geom_point(aes(color=NaCl), size=I(5)) + xlab("pH of Buffer") + ylab("Percent Yield of Protein") + ggtitle("Percent Yield by Varying pH and Ionic Strength in Solubilization Buffer") + theme(plot.title = element_text(hjust = 0.5)) + geom_errorbar(data=DATA, mapping=aes(x=pH, ymin=cimin, ymax=cimax))
1.96 * (0.0/sqrt(2))
1.96 * (12.2/sqrt(2))
1.96 * (14/sqrt(2))
1.96 * (1.7/sqrt(2))
1.96 * (5/sqrt(2))
cimin <- c()
cimin <- c(
43.6 - (1.96*(0.0/sqrt(2))),
31.4 - (1.96*(12.2/sqrt(2))),
76.1 - (1.96*(14.0/sqrt(2))),
25.1 - (1.96*(1.7/sqrt(2))),
28.1 - (1.96*(5/sqrt(2))),
44.8 - (1.96*(4/sqrt(2))),
22.8 - (1.96*(0.1/sqrt(2))),
23.2 - (1.96*(2.7/sqrt(2))))
cimin
cimax <- c(
clear
cimax <- yield + (c(0, 12.2, 14, 1.7, 5, 4, 0.1, 2.7) / sqrt(rep(2, times=8)))
cimax
DATA <- data.frame(cbind(buffer, pH, NaCl, yield, cimin, cimax))
ggplot(data=DATA, mapping=aes(x=pH, y=yield)) + geom_point(aes(color=NaCl), size=I(5)) + xlab("pH of Buffer") + ylab("Percent Yield of Protein") + ggtitle("Percent Yield by Varying pH and Ionic Strength in Solubilization Buffer") + theme(plot.title = element_text(hjust = 0.5)) + geom_errorbar(data=DATA, mapping=aes(x=pH, ymin=cimin, ymax=cimax))
ggplot(data=DATA, mapping=aes(x=pH, y=yield)) + geom_point(aes(color=NaCl), size=I(5)) + xlab("pH of Buffer") + ylab("Percent Yield of Protein") + ggtitle("Percent Yield by Varying pH and Ionic Strength in Solubilization Buffer") + theme(plot.title = element_text(hjust = 0.5)) + geom_errorbar(data=DATA, mapping=aes(x=pH, ymin=cimin, ymax=cimax)) + scale_y_continuous(breaks=seq(0, 100, 10))
ggplot(data=DATA, mapping=aes(x=pH, y=yield)) + geom_point(aes(color=NaCl), size=I(5)) + xlab("pH of Buffer") + ylab("Percent Yield of Protein") + ggtitle("Percent Yield by Varying pH and Ionic Strength in Solubilization Buffer") + theme(plot.title = element_text(hjust = 0.5)) + geom_errorbar(data=DATA, mapping=aes(x=pH, ymin=cimin, ymax=cimax)) + scale_y_discrete()
ggplot(data=DATA, mapping=aes(x=pH, y=yield)) + geom_point(aes(color=NaCl), size=I(5)) + xlab("pH of Buffer") + ylab("Percent Yield of Protein") + ggtitle("Percent Yield by Varying pH and Ionic Strength in Solubilization Buffer") + theme(plot.title = element_text(hjust = 0.5)) + geom_errorbar(data=DATA, mapping=aes(x=pH, ymin=cimin, ymax=cimax)) + scale_y_discrete(breaks=seq(0, 100, 10))
seq(0, 100, 10)
ggplot(data=DATA, mapping=aes(x=pH, y=yield)) + geom_point(aes(color=NaCl), size=I(5)) + xlab("pH of Buffer") + ylab("Percent Yield of Protein") + ggtitle("Percent Yield by Varying pH and Ionic Strength in Solubilization Buffer") + theme(plot.title = element_text(hjust = 0.5)) + geom_errorbar(data=DATA, mapping=aes(x=pH, ymin=cimin, ymax=cimax)) + scale_y_discrete(breaks=seq(1, 2, 3))
ggplot(data=DATA, mapping=aes(x=pH, y=yield)) + geom_point(aes(color=NaCl), size=I(5)) + xlab("pH of Buffer") + ylab("Percent Yield of Protein") + ggtitle("Percent Yield by Varying pH and Ionic Strength in Solubilization Buffer") + theme(plot.title = element_text(hjust = 0.5)) + geom_errorbar(data=DATA, mapping=aes(x=pH, ymin=cimin, ymax=cimax)) + scale_y_discrete()
ggplot(data=DATA, mapping=aes(x=pH, y=yield)) + geom_point(aes(color=NaCl), size=I(5)) + xlab("pH of Buffer") + ylab("Percent Yield of Protein") + ggtitle("Percent Yield by Varying pH and Ionic Strength in Solubilization Buffer") + theme(plot.title = element_text(hjust = 0.5)) + geom_errorbar(data=DATA, mapping=aes(x=pH, ymin=cimin, ymax=cimax)) + scale_y_discrete(limits=c(00, 100))
ggplot(data=DATA, mapping=aes(x=pH, y=yield)) + geom_point(aes(color=NaCl), size=I(5)) + xlab("pH of Buffer") + ylab("Percent Yield of Protein") + ggtitle("Percent Yield by Varying pH and Ionic Strength in Solubilization Buffer") + theme(plot.title = element_text(hjust = 0.5)) + geom_errorbar(data=DATA, mapping=aes(x=pH, ymin=cimin, ymax=cimax)) + scale_y_discrete(limits=c(0, 100))
ggplot(data=DATA, mapping=aes(x=pH, y=yield)) + geom_point(aes(color=NaCl), size=I(5)) + xlab("pH of Buffer") + ylab("Percent Yield of Protein") + ggtitle("Percent Yield by Varying pH and Ionic Strength in Solubilization Buffer") + theme(plot.title = element_text(hjust = 0.5)) + geom_errorbar(data=DATA, mapping=aes(x=pH, ymin=cimin, ymax=cimax)) + scale_y_discrete()
gc()
clear
gc()
setwd("~/Desktop/IMMC")
rm(list=ls())
setwd("~/Desktop/IMMC/data")
timezone <- read.csv("timezone.csv")
zone <- read.csv("zone.csv")
View(timezone)
unique(timezone)
?unique
timezone <- read.csv("timezone.csv", header=F)
names(timezone) <- c("zone.id", "timezone", "start.time", "gmt.offset", "dst")
timezone.test <- cbind(timezone$zone.id, timezone$timezone, timezone$gmt.offset, timezone$dst)
unique(timezone.test)
timezone <- cbind(timezone$zone.id, timezone$timezone, timezone$gmt.offset, timezone$dst)
View(timezone)
timezone[,c("zone.id")]
timezone[c("zone.id")]
timezone["zone.id"]
timezone[,"zone.id"]
timezone <- read.csv("timezone.csv", header=F)
names(timezone) <- c("zone.id", "timezone", "start.time", "gmt.offset", "dst")
timezone[,c("zone.id")]
timezone <- timezone[,c("zone.id", "timezone", "gmt.offset", "dst")]
timezone <- read.csv("timezone.csv", header=F)
names(timezone) <- c("zone.id", "timezone", "start.time", "gmt.offset", "dst")
timezone <- timezone[,c("zone.id", "timezone", "gmt.offset", "dst")]
timezone
View(timezone)
timezone <- unique(timezone)
View(timezone)
timezone <- read.csv("timezone.csv", header=F)
names(timezone) <- c("zone.id", "time.standard", "start.time", "gmt.offset", "dst")
timezone <- timezone[,c("zone.id", "time.standard", "gmt.offset", "dst")]
timezone <- unique(timezone)
rm(list=ls())
timezone <- read.csv("timezone.csv", header=F)
names(timezone) <- c("zone.id", "time.standard", "start.time", "gmt.offset", "dst")
timezone <- timezone[,c("zone.id", "time.standard", "gmt.offset", "dst")]
timezone <- unique(timezone)
nrow(timezone)
zone <- read.csv("zone.csv")
View(zone)
zone <- read.csv("zone.csv", header=F)
View(zone)
names(zone) <- c("zone.id", "abbreviation", "zone.name")
View(zone)
zone[1]
zone[,1]
zone[1]
zone[1,3]
zonenames <- c()
for (i in 1:nrow(timezone)) {
zonenames <- c(zonenames, zone[1,3])
}
zonenames
as.character(zone[1,3])
zonenames <- c()
for (i in 1:nrow(timezone)) {
zonenames <- c(zonenames, as.character(zone[i,3]))
}
zonenames
timezone[i]
timezone
timezone[i,1]
timezone[1,1]
timezone[2,1]
timezone[3,1]
timezone[4,1]
timezone[5,1]
timezone[6,1]
zonenames <- c()
for (i in 1:nrow(timezone)) {
zonenames <- c(zonenames, as.character(zone[timezone[i,1],3]))
}
zonenames
timezone["zone.names"] <- zonenames
View(timezone)
write.csv("processed.timezone.csv", timezone)
gc()
setwd("~/Desktop/IMMC/data")
rm(list=ls())
timezone <- read.csv("timezone.csv", header=F)
names(timezone) <- c("zone.id", "time.standard", "start.time", "gmt.offset", "dst")
timezone <- timezone[,c("zone.id", "time.standard", "gmt.offset", "dst")]
timezone <- unique(timezone)
zone <- read.csv("zone.csv", header=F)
names(zone) <- c("zone.id", "abbreviation", "zone.name")
zonenames <- c()
for (i in 1:nrow(timezone)) {
zonenames <- c(zonenames, as.character(zone[timezone[i,1],3]))
}
timezone["zone.names"] <- zonenames
write.csv("processed.timezone.csv", timezone)
write.csv(file="processed.timezone.csv", row.names=F, col.names=T)
write.csv(file="processed.timezone.csv", timezone, row.names=F, col.names=T)
write.csv(file="processed.timezone.csv", timezone, row.names=F)
?write.csv
write.csv(file="processed.timezone.csv", timezone, row.names=F, col.names=F)
View(timezone)
